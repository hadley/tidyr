% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pivot-long.R
\name{pivot_longer}
\alias{pivot_longer}
\alias{pivot_longer_spec}
\title{Pivot data from wide to long.}
\usage{
pivot_longer(data, cols, names_to = "name", names_prefix = NULL,
  names_sep = NULL, names_pattern = NULL, values_to = "value",
  values_drop_na = FALSE, col_ptypes = list(), spec = NULL)

pivot_longer_spec(data, cols, names_to = "name", values_to = "value",
  names_prefix = NULL, names_sep = NULL, names_pattern = NULL,
  col_ptypes = NULL)
}
\arguments{
\item{data}{A data frame to pivot.}

\item{cols}{Columns to pivot into longer format. This takes a tidyselect
specification.}

\item{names_to}{A string specifying the name of the column to create
from the data stored in the column names of \code{data}.

Can be a character vector, creating multiple columns, if \code{names_sep}
or \code{names_pattern} is provided.}

\item{names_prefix}{A regular expression used to remove matching text
from the start of each variable name.}

\item{names_sep, names_pattern}{If \code{names_to} contains multiple values,
these arguments control how the column name is broken up.

\code{names_sep} takes the same specification as \code{\link[=separate]{separate()}}, and can either
be a numeric vector (specifying positions to break on), or a single string
(specifying a regular expression to split on).

\code{names_pattern} takes the same specification as \code{\link[=extract]{extract()}}, a regular
expression containing matching groups (\code{()}).

If these arguments does not give you enough control, use
\code{pivot_longer_spec()} to create a spec object and process manually as
needed.}

\item{values_to}{A string specifying the name of the column to create
from the data stored in cell values. If \code{names_to} is a character
containing the special \code{.value} sentinel, this value will be ignored,
and the name of the value column will be derived from part of the
existing column names.}

\item{values_drop_na}{If \code{TRUE}, will drop rows that contain only \code{NA}s
in the \code{value_to} column. This effectively converts explicit missing values
to implicit missing values, and should generally be used only when missing
values in \code{data} were created by its structure.}

\item{col_ptypes}{A list of of column name-prototype pairs.

If not specified, the type of the generated from \code{names_to} will be
character, and the type of the variables generated from \code{values_to}
will be the common type of the input columns used to generate them.}

\item{spec}{Alternatively, instead of providing \code{cols} (and \code{names_to} and
\code{values_to}) you can parse a specification data frame. This is useful
for more complex pivots because it gives you greater control on how
metadata stored in the column names turns into columns in the result.

Must be a data frame containing character \code{.name} and \code{.value} columns.}
}
\description{
\code{pivot_longer()} "lengthens" data, increasing the number of rows and
decreasing the number of columns. The inverse transformation. in
\code{\link[=pivot_wider]{pivot_wider()}}

Learn more in \code{vignette("pivot")}.
}
\details{
\code{pivot_longer()} is an updated approach to \code{\link[=gather]{gather()}}, designed to be both
simpler to use and to handle more use cases. We recomend you use
\code{pivot_longer()} for new code; \code{gather()} isn't going away but is no longer
under active development.
}
\examples{
# See vignette("pivot") for examples and explanation

# Simplest case where column names are character data
relig_income
relig_income \%>\%
 pivot_longer(-religion, names_to = "income", values_to = "count")

# Slightly more complex case where columns have common prefix,
# and missing missings are structural so should be dropped.
billboard
billboard \%>\%
 pivot_longer(
   cols = starts_with("wk"),
   names_to = "week",
   names_prefix = "wk",
   values_to = "rank",
   values_drop_na = TRUE
 )

# Multiple variables stored in colum names
who \%>\% pivot_longer(
  cols = new_sp_m014:newrel_f65,
  names_to = c("diagnosis", "gender", "age"),
  names_pattern = "new_?(.*)_(.)(.*)",
  values_to = "count"
)

# Multiple observations per row
anscombe
anscombe \%>\%
 pivot_longer(everything(),
   names_to = c(".value", "set"),
   names_pattern = "(.)(.)"
 )
}
