% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chop.R
\name{chop}
\alias{chop}
\title{Chop data.frame into a list of data frames.}
\usage{
chop(data, ...)
}
\arguments{
\item{data}{A data frame.}

\item{...}{A selection of columns. If empty, then grouping variables are used.
If there are no grouping variables either, then a list is returned with its
single element being the passed in data frame.

You can supply bare variable names, select all
variables between x and z with \code{x:z}, exclude y with \code{-y}. For
more options, see the \code{\link[dplyr:select]{dplyr::select()}} documentation. See also
the section on selection rules below.}
}
\description{
\code{chop()} creates a list of data frames each containing all
the variables from the parent data frame.
}
\details{
This function differs from base R \code{split()} in that \code{chop()} will keep any levels
which contain NA values, whereas \code{split()} silently drops them.  Also,
since splitting variables may only be columns within the parent data frame,
there is no opportunity for factor recycling (which is done in \code{split()})

This function differs from \code{nest()} in 2 ways: first, the result is a list
of data frames, and not a list-column within a data frame; second,
the child data frames contain all variables from the parent data frame.
}
\section{Rules for selection}{


Arguments for selecting columns are passed to
\code{\link[tidyselect:vars_select]{tidyselect::vars_select()}} and are treated specially. Unlike other
verbs, selecting functions make a strict distinction between data
expressions and context expressions.
\itemize{
\item A data expression is either a bare name like \code{x} or an expression
like \code{x:y} or \code{c(x, y)}. In a data expression, you can only refer
to columns from the data frame.
\item Everything else is a context expression in which you can only
refer to objects that you have defined with \code{<-}.
}

For instance, \code{col1:col3} is a data expression that refers to data
columns, while \code{seq(start, end)} is a context expression that
refers to objects from the contexts.

If you really need to refer to contextual objects from a data
expression, you can unquote them with the tidy eval operator
\code{!!}. This operator evaluates its argument in the context and
inlines the result in the surrounding function call. For instance,
\code{c(x, !! x)} selects the \code{x} column within the data frame and the
column referred to by the object \code{x} defined in the context (which
can contain either a column name as string or a column position).
}

