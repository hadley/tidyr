% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hoist.R
\name{hoist}
\alias{hoist}
\title{Selectively pull out components of a list-column}
\usage{
hoist(.data, .col, ..., .remove = TRUE, .ptype = list())
}
\arguments{
\item{.data}{A data frame.}

\item{.col}{List-column to extract components from.}

\item{...}{Components of \code{.col} to turn into columns in the form
\code{col_name = "pluck_specification"}. You can pluck by name with a character
vector, by position with an integer vector, or with a combination of the
two with a list. See \code{\link[purrr:pluck]{purrr::pluck()}} for details.}

\item{.remove}{If \code{TRUE}, the default, will remove extracted components
from \code{.col}. This ensures that each value lives only in one place.}

\item{.ptype}{Optionally, a named list of prototypes declaring the desired
output type of each component.}
}
\description{
\code{hoist()} allows you to selectively pull components of a list-column out
in to their own top-level columns, using the same syntax as \code{\link[purrr:pluck]{purrr::pluck()}}.
It's a useful complement to \code{\link[=unnest_wider]{unnest_wider()}}, which turns every component
into its own column.

It is particularly useful when working with deeply nested JSON data,
so more details in \code{vignette("rectangling")}.
}
\examples{
df <- tibble(
  character = c("Toothless", "Dory"),
  metadata = list(
    list(
      species = "dragon",
      color = "black",
      films = c(
        "How to Train Your Dragon",
        "How to Train Your Dragon 2",
        "How to Train Your Dragon: The Hidden World"
       )
    ),
    list(
      species = "clownfish",
      color = "blue",
      films = c("Finding Nemo", "Finding Dory")
    )
  )
)

df
df \%>\% hoist(metadata,
  species = "species",
  first_film = list("films", 1L),
  third_film = list("films", 3L)
)

# cf unnest_wider() which extracts all columns
df \%>\% unnest_wider(metadata)
}
