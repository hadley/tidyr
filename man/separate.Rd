% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/separate.R
\name{separate}
\alias{separate}
\title{Separate one column into multiple columns.}
\usage{
separate(data, col, into, sep = "[^[:alnum:]]+", remove = TRUE,
  convert = FALSE, extra = "warn", fill = "warn", ...)
}
\arguments{
\item{data}{A data frame.}

\item{col}{Column name or position. This is passed to
\code{\link[tidyselect:vars_pull]{tidyselect::vars_pull()}}.

This argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote column
names or column positions).}

\item{into}{Names of new variables to create as character vector.
Use \code{NA} to omit the variable in the output.}

\item{sep}{Separator between columns.

If character, is interpreted as a regular expression. The default
value is a regular expression that matches any sequence of
non-alphanumeric values.

If numeric, interpreted as positions to split at. Positive values start
at 1 at the far-left of the string; negative value start at -1 at the
far-right of the string. The length of \code{sep} should be one less than
\code{into}.}

\item{remove}{If \code{TRUE}, remove input column from output data frame.}

\item{convert}{If \code{TRUE}, will run \code{\link[=type.convert]{type.convert()}} with
\code{as.is = TRUE} on new columns. This is useful if the component
columns are integer, numeric or logical.}

\item{extra}{If \code{sep} is a character vector, this controls what
happens when there are too many pieces. There are three valid options:
\itemize{
\item "warn" (the default): emit a warning and drop extra values.
\item "drop": drop any extra values without a warning.
\item "merge": only splits at most \code{length(into)} times
}}

\item{fill}{If \code{sep} is a character vector, this controls what
happens when there are not enough pieces. There are three valid options:
\itemize{
\item "warn" (the default): emit a warning and fill from the right
\item "right": fill with missing values on the right
\item "left": fill with missing values on the left
}}

\item{...}{Additional arguments passed on to methods.}
}
\description{
Given either regular expression or a vector of character positions,
\code{separate()} turns a single character column into multiple columns.
}
\examples{
library(dplyr)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df \%>\% separate(x, c("A", "B"))

# If you just want the second variable:
df \%>\% separate(x, c(NA, "B"))

# If every row doesn't split into the same number of pieces, use
# the extra and fill arguments to control what happens
df <- data.frame(x = c("a", "a b", "a b c", NA))
df \%>\% separate(x, c("a", "b"))
# The same behaviour drops the c but no warnings
df \%>\% separate(x, c("a", "b"), extra = "drop", fill = "right")
# Another option:
df \%>\% separate(x, c("a", "b"), extra = "merge", fill = "left")
# Or you can keep all three
df \%>\% separate(x, c("a", "b", "c"))

# If only want to split specified number of times use extra = "merge"
df <- data.frame(x = c("x: 123", "y: error: 7"))
df \%>\% separate(x, c("key", "value"), ": ", extra = "merge")

# Use regular expressions to separate on multiple characters:
df <- data.frame(x = c(NA, "a?b", "a.d", "b:c"))
df \%>\% separate(x, c("A","B"), sep = "([\\\\.\\\\?\\\\:])")

# Argument col can take quasiquotation
quasi_commasep <- function(data, col_name) {
   # quote the column input variable
   col_var <- rlang::enquo(col_name)
   print(col_var)

   #  make a string version for column naming
   col_string <- rlang::quo_name(col_var)
   print(col_string)

   data \%>\%
       separate(col = !!col_var, into = paste0("fav",col_string, 1:3), sep = ",")
}
df <- data.frame(pets = c("dog, cat, bunny","rock, cat, ferret","chinchilla, cat, pig"))
df \%>\% quasi_commasep(pets)

}
\seealso{
\code{\link[=unite]{unite()}}, the complement, \code{\link[=extract]{extract()}} which uses regular
expression capturing groups.
}
